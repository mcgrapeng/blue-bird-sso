package com.bird;

/**
 * @author 张朋
 * @version 1.0
 * @desc
 * @date 2020/5/7 13:31
 */
public class ReadMe {


    /**

     在早期的时候，Dubbo 和 Spring Cloud 是两个隔离的生态
     ，因此经常讨论的一个话题就是《Java 微服务框架选型（Dubbo 和 Spring Cloud？）》。
     而现在 Spring Cloud Alibaba Dubbo 的出现，将 Dubbo 融合到 Spring Cloud 中
     ，取代 [Feign]+ [Ribbon]
     ，提供更好的服务治理能力与更优的性能。

     由于 Dubbo Spring Cloud 构建在原生的 Spring Cloud 之上，其服务治理方面的能力可认为是 Spring Cloud Plus，
     不仅完全覆盖 Spring Cloud 原生特性，而且提供更为稳定和成熟的实现


     在Spring Cloud构建的微服务系统中，大多数的开发者使用都是官方提供的Feign组件来进行内部服务通信
     ，这种声明式的HTTP客户端使用起来非常的简洁、方便、优雅，但是有一点，在使用Feign消费服务的时候，相比较Dubbo这种RPC框架而言，性能堪忧。
     虽说在微服务架构中，会讲按照业务划分的微服务独立部署，并且运行在各自的进程中。微服务之间的通信更加倾向于使用HTTP这种简答的通信机制，
     大多数情况都会使用REST API。这种通信方式非常的简洁高效，并且和开发平台、语言无关，但是通常情况下，HTTP并不会开启KeepAlive功能，
     即当前连接为短连接，短连接的缺点是每次请求都需要建立TCP连接，这使得其效率变的相当低下。
     对外部提供REST API服务是一件非常好的事情，但是如果内部调用也是使用HTTP调用方式，就会显得显得性能低下，
     Spring Cloud默认使用的Feign组件进行内部服务调用就是使用的HTTP协议进行调用，这时，我们如果内部服务使用RPC调用，
     对外使用REST API，将会是一个非常不错的选择，恰巧，Dubbo Spring Cloud给了我们这种选择的实现方式。



     1.3 Dubbo Spring Cloud 主要特性

     面向接口代理的高性能RPC调用：提供高性能的基于代理的远程调用能力，服务以接口为粒度，屏蔽了远程调用底层细节。
     智能负载均衡：内置多种负载均衡策略，智能感知下游节点健康状况，显著减少调用延迟，提高系统吞吐量。
     服务自动注册与发现：支持多种注册中心服务，服务实例上下线实时感知。
     高度可扩展能力：遵循微内核+插件的设计原则，所有核心能力如Protocol、Transport、Serialization被设计为扩展点，平等对待内置实现和第三方实现。
     运行期流量调度：内置条件、脚本等路由策略，通过配置不同的路由规则，轻松实现灰度发布，同机房优先等功能。
     可视化的服务治理与运维：提供丰富服务治理、运维工具：随时查询服务元数据、服务健康状态及调用统计，实时下发路由策略、调整配置参数。



     阿里为何放弃 Zookeeper
         CAP

         有个思考，从 CAP 角度考虑，服务注册中心是 CP 系统还是 AP 系统呢？

         服务注册中心是为了服务间调用服务的，那么绝对不允许因为服务注册中心出现了问题而导致服务间的调用出问题
         假如有 node1，node2，node3 集群节点。保存着可用服务列表 ip1，ip2，ip3，试想如果此时不一致，比如 node1 只保存了ip1，ip2，此时服务读取 node1 的节点，那么会造成什么影响？
         调用 node1 的服务，顶多就是负载均衡时不会有流量打到 ip3，然后等 node1 同步回 ip3 后，又一致了，这对服务其实没什么太大影响。所以，推测出服务注册中心应该是个 AP 系统。

         Zookeeper 是个 CP 系统，强一致性

         场景1，当 master 挂了，此时 Zookeeper 集群需要重新选举，而此时服务需要来读取可用服务，是不可用的。影响到了服务的可用性当然你可以说服务本地有缓存可用列表。然而下面这种方式就更无法处理了。
         场景2，分区可用。试想，有 3 个机房，如果其中机房 3 和机房 1，2 网络断了，那么机房 3 的注册中心就不能注册新的机器了，这显然也不合理从健康检查角度来看


         Zookeeper 是通过 TCP 的心跳判断服务是否可用，但 TCP 的活性并不代表服务是可用的，如：连接池已满，DB 挂了等

         理想的注册中心

         服务自动注册发现。最好有新的服务注册上去时还能推送到调用端
         能对注册上来的机器方便的进行管理，能手动删除（发送信号让服务优雅下线）、恢复机器
         服务的健康检查，能真正的检测到服务是否可用
         可以看到是否有其他调用服务正在订阅注册上来的服务






     Feign + Dubbo

     Feign + Ribbon

     RestTemplate + Dubbo

     Dubbo(推荐)


     元数据中心目前支持 redis（推荐）
     */
}
